// src/controllers/accountController.js
const Account = require('../models/AccountModel')
const { v2: cloudinary } = require('cloudinary')
const Category = require('../models/CategoryModel') // ho·∫∑c ƒë√∫ng path model b·∫°n l∆∞u

// T·∫°o m·ªõi m·ªôt t√†i kho·∫£n
const createAccount = async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ message: 'Ch·ªâ admin m·ªõi ƒë∆∞·ª£c t·∫°o acc' })
    }

    const {
      name,
      type,
      price,
      champions,
      skins,
      gems,
      username,
      password,
      authCode,
      rank
    } = req.body

    // const accExist = await Account.findOne({ username })
    // if (accExist) {
    //   return res.status(400).json({ message: 'T√†i kho·∫£n game n√†y ƒë√£ t·ªìn t·∫°i' })
    // }

    // Upload ·∫£nh ƒë·∫°i di·ªán (1 ·∫£nh)
    let image = null
    if (req.files && req.files['image']) {
      const file = req.files['image'][0]
      image = {
        url: file.path,
        public_id: file.filename
      }
    }

    // Upload nhi·ªÅu ·∫£nh (gallery)
    const images = req.files?.images?.map(file => ({
      url: file.path,
      public_id: file.filename
    })) || []

    const newAccount = new Account({
      name,
      type,
      price,
      champions,
      skins,
      gems,
      username,
      password,
      authCode,
      rank,
      image,
      images
    })

    await newAccount.save()

    res.status(201).json({ message: 'T·∫°o acc th√†nh c√¥ng', account: newAccount })
  } catch (error) {
    console.error('L·ªói khi t·∫°o acc:', error)
    res.status(500).json({ message: 'L·ªói t·∫°o acc', error: error.message })
  }
}


const getAllAccounts = async (req, res) => {
  try {
    const isAdmin = req.user?.isAdmin;
    const { page = 1, limit = 20000, minPrice, maxPrice, type, rank, sortPrice } = req.query;

    const query = { isSold: false };

    if (minPrice || maxPrice) {
      query.price = {};
      if (minPrice) query.price.$gte = Number(minPrice);
      if (maxPrice) query.price.$lte = Number(maxPrice);
    }

    if (type) query.type = type;

    if (rank && rank !== 'T·∫•t c·∫£ rank') {
      query.rank = decodeURIComponent(rank).trim();
    }

    const sortQuery = {};
    if (sortPrice === 'asc') sortQuery.price = 1;
    else if (sortPrice === 'desc') sortQuery.price = -1;

    const total = await Account.countDocuments(query);
    const accounts = await Account.find(query)
      .populate('type', 'name')
      // .select(isAdmin ? '-__v' : 'name type price champions skins gems rank isSold createdAt updatedAt image')
      .select(
        isAdmin
          ? 'name type price champions skins gems rank username password authCode isSold createdAt updatedAt image'
          : 'name type price champions skins gems rank isSold createdAt updatedAt image'
      )

      .sort(sortQuery) // üÜï
      .skip((page - 1) * limit)
      .limit(Number(limit));

    res.status(200).json({
      total,
      currentPage: Number(page),
      totalPages: Math.ceil(total / limit),
      accounts
    });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch acc', error: error.message });
  }
};

const getAllAccountsLanding = async (req, res) => {
  try {
    const { type, rank } = req.query;  // Ch·ªâ l·∫•y c√°c query c·∫ßn thi·∫øt

    const query = { isSold: false };  // ƒêi·ªÅu ki·ªán m·∫∑c ƒë·ªãnh l√† t√†i kho·∫£n ch∆∞a b√°n

    // B·ªô l·ªçc theo lo·∫°i t√†i kho·∫£n
    if (type) query.type = type;

    // B·ªô l·ªçc theo rank
    if (rank && rank !== 'T·∫•t c·∫£ rank') {
      query.rank = decodeURIComponent(rank).trim();
    }

    // L·∫•y t·ªïng s·ªë t√†i kho·∫£n
    const total = await Account.countDocuments(query);

    // L·∫•y danh s√°ch t√†i kho·∫£n ch·ªâ v·ªõi c√°c tr∆∞·ªùng '_id' v√† 'type'
    const accounts = await Account.find(query)
      .select('_id type')  // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng '_id' v√† 'type'
      .lean();  // S·ª≠ d·ª•ng lean() ƒë·ªÉ tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë∆°n gi·∫£n, tr√°nh overhead t·ª´ c√°c m√¥ h√¨nh mongoose

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
      total,
      accounts
    });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch acc', error: error.message });
  }
};



const getAccountsExcludeLucky = async (req, res) => {
  try {
    const { page = 1, limit = 50, minPrice, maxPrice, rank, sortPrice } = req.query;

    // 1. L·∫•y danh s√°ch category "Th·ª≠ V·∫≠n May"
    const luckyCategories = await Category.find({
      name: { $regex: /th·ª≠ v·∫≠n may/i },
    });

    const excludedCategoryIds = luckyCategories.map(cat => cat._id.toString());

    // 2. T·∫°o query l·ªçc
    const query = {
      isSold: false,
      type: { $nin: excludedCategoryIds }, // Lo·∫°i b·ªè c√°c lo·∫°i th·ª≠ v·∫≠n may
    };

    if (minPrice || maxPrice) {
      query.price = {};
      if (minPrice) query.price.$gte = Number(minPrice);
      if (maxPrice) query.price.$lte = Number(maxPrice);
    }

    if (rank && rank !== 'T·∫•t c·∫£ rank') {
      query.rank = decodeURIComponent(rank).trim();
    }

    const sortQuery = {};
    if (sortPrice === 'asc') sortQuery.price = 1;
    else if (sortPrice === 'desc') sortQuery.price = -1;

    const total = await Account.countDocuments(query);
    const accounts = await Account.find(query)
      .populate('type', 'name')
      .select('name type price champions skins gems rank image isSold')
      .sort(sortQuery)
      .skip((page - 1) * limit)
      .limit(Number(limit));

    res.status(200).json({
      total,
      currentPage: Number(page),
      totalPages: Math.ceil(total / limit),
      accounts,
    });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói l·∫•y acc kh√¥ng thu·ªôc th·ª≠ v·∫≠n may', error: error.message });
  }
};

const getAccountById = async (req, res) => {
  try {
    const acc = await Account.findById(req.params.id).populate('type', 'name')
    if (!acc) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y acc' })

    const isAdmin = req.user?.isAdmin
    if (!isAdmin) {
      const { username, password, authCode, ...publicData } = acc._doc
      return res.status(200).json(publicData)
    }

    res.status(200).json(acc)
  } catch (err) {
    res.status(500).json({ message: 'L·ªói l·∫•y acc', error: err.message })
  }
}

const updateAccount = async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t acc' })
    }

    const updated = await Account.findByIdAndUpdate(req.params.id, req.body, { new: true })
    if (!updated) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y acc' })
    res.status(200).json({ message: 'C·∫≠p nh·∫≠t acc th√†nh c√¥ng', account: updated })
  } catch (err) {
    res.status(500).json({ message: 'L·ªói c·∫≠p nh·∫≠t acc', error: err.message })
  }
}

const deleteAccount = async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° acc' })
    }

    const acc = await Account.findById(req.params.id)
    if (!acc) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y acc' })

    if (acc.image?.public_id) {
      await cloudinary.uploader.destroy(acc.image.public_id)
    }
    for (const img of acc.images) {
      if (img.public_id) {
        await cloudinary.uploader.destroy(img.public_id)
      }
    }

    await acc.deleteOne()

    res.status(200).json({ message: 'ƒê√£ xo√° acc th√†nh c√¥ng' })
  } catch (err) {
    res.status(500).json({ message: 'L·ªói xo√° acc', error: err.message })
  }
}


// üÜï API ch·ªâ d√†nh cho Admin
const getAllAccountsForAdmin = async (req, res) => {
  try {
    const { page = 1, limit = 50, sortPrice, soldStatus } = req.query;

    // Kh·ªüi t·∫°o query m·∫∑c ƒë·ªãnh
    const query = {};

    // L·ªçc theo tr·∫°ng th√°i b√°n n·∫øu c√≥
    if (soldStatus) {
      if (soldStatus === 'sold') {
        query.isSold = true;
      } else if (soldStatus === 'unsold') {
        query.isSold = false;
      }
    }

    // S·∫Øp x·∫øp theo gi√° n·∫øu c√≥
    const sortQuery = {};
    if (sortPrice === 'asc') sortQuery.price = 1;
    else if (sortPrice === 'desc') sortQuery.price = -1;

    // L·ªçc theo username n·∫øu c√≥
    if (req.query.username) {
      query.username = { $regex: req.query.username, $options: 'i' }; // kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
    }

    // Ki·ªÉm tra l·∫°i query ƒë·ªÉ x√°c nh·∫≠n ƒë√∫ng l·ªçc
    console.log('Query:', query);

    // T√≠nh t·ªïng s·ªë t√†i kho·∫£n ph√π h·ª£p v·ªõi query
    const total = await Account.countDocuments(query);

    // L·∫•y c√°c t√†i kho·∫£n theo query
    const accounts = await Account.find(query)
      .populate('type', 'name')  // T·∫£i d·ªØ li·ªáu t·ª´ lo·∫°i t√†i kho·∫£n
      .select('name type price champions skins gems rank username password authCode isSold createdAt updatedAt image')
      .sort(sortQuery) // √Åp d·ª•ng s·∫Øp x·∫øp theo gi√°
      .skip((page - 1) * limit) // B·ªè qua c√°c t√†i kho·∫£n tr∆∞·ªõc trang hi·ªán t·∫°i
      .limit(Number(limit)); // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t√†i kho·∫£n tr√™n m·ªói trang

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
      total,
      currentPage: Number(page),
      totalPages: Math.ceil(total / limit),
      accounts
    });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch acc (admin)', error: error.message });
  }
};







module.exports = {
  createAccount,
  getAllAccounts,
  getAccountById,
  updateAccount,
  deleteAccount,
  getAllAccountsForAdmin,
  getAccountsExcludeLucky,getAllAccountsLanding
} 
